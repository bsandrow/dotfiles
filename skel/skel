#!/usr/bin/env python

import argparse
import glob
import os
import shutil
import subprocess
import sys

# TODO Add $ALTERNATE_EDITOR usage for emacs users

def parse_options():

    usage = "%(prog)s [options] --list\n" +\
            "       %(prog)s [options] template_name filename"

    parser = argparse.ArgumentParser(usage=usage,description="""Create a new file from a template base.""")

    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose mode.')
    parser.add_argument('--list', action='store_true', default=False, help='List all templates.')
    parser.add_argument('-e','--edit', action='store_true', dest='launch_editor',
                        help='''Launch an editor on the target file. Looks for editor in $EDITOR, then
                        $VISUAL, then defaults to nano.''')
    parser.add_argument('--template-dir', action='store', metavar='TEMPLATE_DIR',
                        help='''Use TEMPLATE_DIR as the directory to look for templates. This can also
                        be set with the $TEMPLATE_DIR environment variable.''')

    parser.add_argument('template_name', default=None, nargs='?', help='The name of the template to use.')
    parser.add_argument('filename', default=None, nargs='?', help='The name of the file to base from template.')

    options = parser.parse_args()
    options.editor = os.environ.get("EDITOR", os.environ.get("VISUAL", 'nano'))

    # Figure out what the template directory is
    if not options.template_dir:
        options.template_dir = os.environ.get("TEMPLATE_DIR", None)
    if not options.template_dir:
        options.template_dir = os.path.dirname( os.path.realpath( sys.argv[0] ) )

    # Without --list, template_name and filename are required.
    if not options.list:
        if (not options.template_name or not options.filename):
            parser.error('too few arguments')

        options.template_file = filename_from_template_name(options.template_name)
        options.template_path = os.path.join(options.template_dir, options.template_file)

        if not os.path.exists(options.template_path):
            parser.error("template does not exist: %s" % options.template_path)

    return options

def template_name_from_filename(filename):
    filename = os.path.basename(filename)
    if filename.endswith('.skel'):
        return filename[:-5]
    else:
        return filename

def filename_from_template_name(template_name):
    return template_name + '.skel'

def main():
    options = parse_options()

    if options.verbose:
        print "Template Directory: %s" % options.template_dir

    if options.list:
        templates = glob.glob(os.path.join(options.template_dir, '*.skel'))
        print "Templates:"
        for template in templates:
            print "  %s" % template_name_from_filename(template)
        sys.exit()

    if options.verbose:
        print "Copying '%s' => '%s'" % (options.template_file, options.filename)

    shutil.copy(options.template_path, options.filename)

    if options.launch_editor:
        subprocess.call("%s %s" % (options.editor, options.filename), shell=True)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(">> Caught user interrupt. Exiting...")

# vim:set ft=python tw=100:
