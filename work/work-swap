#!/usr/bin/env python

import os
import optparse
import sys

homedir         = os.environ['HOME']
workdir_default = os.path.join(homedir, "work")
worklib_default = os.path.join(homedir, "worklib")

def parse_options():
    parser = optparse.OptionParser(usage="%prog [options] [environment]", description="Switch"
                                    "between work environments. Each environment is a directory "
                                    "stored under $WORKLIB (default: ~/worklib). The chosen "
                                    "environment is sym-linked to $WORKDIR (default: ~/work).  If "
                                    "no options are given, a list of available work environments "
                                    "will be displayed instead.", )
    parser.add_option('-v', dest='verbose', action='store_true', default=False, help='Turn on verbose output')
    parser.add_option('-q', dest='verbose', action='store_false', help='Turn off verbose output')
    options, args = parser.parse_args()
    options.workdir = os.environ.get("WORKDIR", workdir_default)
    options.worklib = os.environ.get("WORKLIB", worklib_default)

    if len(args) > 1:
        parser.error("Error: Can only switch to one work environment")

    return options, args

def list_available_work_environments(worklib):
    entries = [ entry for entry in os.listdir(worklib) if os.path.isdir(os.path.join(worklib, entry)) ]

    print "Available work environments:"
    for entry in entries:
        print "  %s" % entry

def main():
    options, args = parse_options()
    workdir       = options.workdir
    worklib       = options.worklib

    if not os.path.isdir(worklib):
        sys.exit("Error: worklib directory does not exist: %s" % worklib)

    if os.path.exists(workdir) and not os.path.islink(workdir):
        sys.exit("Error: workdir is not a symlink: %s" % workdir)

    if len(args) == 0:
        list_available_work_environments(worklib)
        sys.exit()

    workenv = os.path.join(worklib, args[0])

    if not os.path.isdir(workenv):
        sys.exit("Error: No such work environment: %s" % args[0])

    if os.path.exists(workdir):
        if options.verbose:
            print "Removing existing link: %s" % workdir
        os.unlink(workdir)

    if options.verbose:
        print "Linking '%s' => '%s'" % (workdir, workenv)
    os.symlink(workenv, workdir)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(">> User Interrupt <<")
